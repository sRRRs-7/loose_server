// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
}

type Code struct {
	ID          string    `json:"id"`
	Username    string    `json:"username"`
	Code        string    `json:"code"`
	Img         string    `json:"img"`
	Description string    `json:"description"`
	Performance string    `json:"performance"`
	Star        []int     `json:"star"`
	Tags        []string  `json:"tags"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	Access      int       `json:"access"`
}

func (Code) IsNode() {}

type CodeWithCollectionID struct {
	ID           string    `json:"id"`
	Username     string    `json:"username"`
	Code         string    `json:"code"`
	Img          string    `json:"img"`
	Description  string    `json:"description"`
	Performance  string    `json:"performance"`
	Star         []int     `json:"star"`
	Tags         []string  `json:"tags"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Access       int       `json:"access"`
	CollectionID int       `json:"collection_id"`
}

func (CodeWithCollectionID) IsNode() {}

type Collection struct {
	ID     string `json:"id"`
	UserID int    `json:"user_id"`
	CodeID int    `json:"code_id"`
}

func (Collection) IsNode() {}

type LoginUserResponse struct {
	ID       string `json:"id"`
	UserID   int    `json:"user_id"`
	Ok       bool   `json:"OK"`
	Username string `json:"username"`
}

func (LoginUserResponse) IsNode() {}

type Media struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	Contents  string    `json:"contents"`
	Img       string    `json:"img"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (Media) IsNode() {}

type MutationResponse struct {
	ID      string `json:"id"`
	IsError bool   `json:"is_error"`
	Message string `json:"message"`
}

func (MutationResponse) IsNode() {}

type User struct {
	ID          string    `json:"id"`
	Username    string    `json:"username"`
	Password    string    `json:"password"`
	Email       string    `json:"email"`
	Sex         string    `json:"sex"`
	DateOfBirth string    `json:"date_of_birth"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (User) IsNode() {}

type AdminUser struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (AdminUser) IsNode() {}

type AdminUserResponse struct {
	ID         string `json:"id"`
	IsUsername bool   `json:"is_username"`
	IsPassword bool   `json:"is_password"`
}

func (AdminUserResponse) IsNode() {}

type SortBy string

const (
	SortByAsc  SortBy = "ASC"
	SortByDesc SortBy = "DESC"
)

var AllSortBy = []SortBy{
	SortByAsc,
	SortByDesc,
}

func (e SortBy) IsValid() bool {
	switch e {
	case SortByAsc, SortByDesc:
		return true
	}
	return false
}

func (e SortBy) String() string {
	return string(e)
}

func (e *SortBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortBy", str)
	}
	return nil
}

func (e SortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
