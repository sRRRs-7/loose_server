// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: stars.sql

package db

import (
	"context"
)

const countStar = `-- name: CountStar :one
SELECT COUNT(code_id) FROM stars
WHERE code_id = $1
`

func (q *Queries) CountStar(ctx context.Context, codeID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countStar, codeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStar = `-- name: CreateStar :exec
INSERT INTO stars (
    user_id, code_id
) VALUES (
    $1, $2
)
`

type CreateStarParams struct {
	UserID int64 `json:"user_id"`
	CodeID int64 `json:"code_id"`
}

func (q *Queries) CreateStar(ctx context.Context, arg CreateStarParams) error {
	_, err := q.db.Exec(ctx, createStar, arg.UserID, arg.CodeID)
	return err
}

const deleteStar = `-- name: DeleteStar :exec
DELETE FROM stars
WHERE user_id = $1 AND code_id = $2
`

type DeleteStarParams struct {
	UserID int64 `json:"user_id"`
	CodeID int64 `json:"code_id"`
}

func (q *Queries) DeleteStar(ctx context.Context, arg DeleteStarParams) error {
	_, err := q.db.Exec(ctx, deleteStar, arg.UserID, arg.CodeID)
	return err
}
