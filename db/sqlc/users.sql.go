// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username,
    password,
    email,
    sex,
    data_of_birth,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateUserParams struct {
	Username    string    `json:"username"`
	Password    string    `json:"password"`
	Email       string    `json:"email"`
	Sex         string    `json:"sex"`
	DataOfBirth string    `json:"data_of_birth"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Sex,
		arg.DataOfBirth,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, username, password, email, sex, data_of_birth, created_at, updated_at FROM users
WHERE username = $1 AND password = $2
`

type LoginUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (*Users, error) {
	row := q.db.QueryRow(ctx, loginUser, arg.Username, arg.Password)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Sex,
		&i.DataOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $2,
    email = $3,
    updated_at = $4
WHERE username = $1
`

type UpdateUserParams struct {
	Username   string    `json:"username"`
	Username_2 string    `json:"username_2"`
	Email      string    `json:"email"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Username_2,
		arg.Email,
		arg.UpdatedAt,
	)
	return err
}
