# validation
directive @validation(
  format: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# all data has unique id
interface Node {
  id: ID!
}

# admin user
type adminUser implements Node {
  id: ID!
  username: String!
  password: String!
}
type adminUserResponse implements Node {
  id: ID!
  is_username: Boolean!
  is_password: Boolean!
}
extend type Mutation {
  createAdminUser(username: String!, password: String!): MutationResponse!
  getAdminUser(username: String!, password: String!): adminUserResponse!
}

# codes
type Code implements Node {
  id: ID!
  username: String!
  code: String!
  img: Byte!
  description: String!
  performance: String!
  star: Int!
  tags: [String!]!
  created_at: Time!
  updated_at: Time!
  access: Int!
}
extend type Query {
  getAllCodes(limit: Int!, skip: Int!): [Code!]!
}
extend type Mutation {
  createCode(
    username: String!
    code: String!
    img: Byte!
    description: String!
    performance: String!
    star: Int!
    tags: [String!]!
    access: Int!
  ): MutationResponse!
  getCode(id: Int!): Code!
  getAllCodesByTag(
    tags: [String]!
    sortBy: SortBy!
    limit: Int!
    skip: Int!
  ): [Code!]!
  GetAllCodesByKeyword(keyword: String!, limit: Int!, skip: Int!): [Code!]!
  updateCodes(
    id: Int!
    code: String!
    img: Byte!
    description: String!
    performance: String!
    tags: [String!]!
  ): MutationResponse!
  updateAccess(id: Int!, access: Int!): MutationResponse!
  deleteCode(id: Int!): MutationResponse!
}

# collection
type Collection implements Node {
  id: ID!
  user_id: Int!
  code_id: Int!
}
type Code_with_CollectionId implements Node {
  id: ID!
  username: String!
  code: String!
  img: Byte!
  description: String!
  performance: String!
  star: Int!
  tags: [String!]!
  created_at: Time!
  updated_at: Time!
  access: Int!
  collection_id: Int!
}
extend type Query {
  getAllCollection(limit: Int!, skip: Int!): [Code_with_CollectionId!]!
}
extend type Mutation {
  createCollection(code_id: Int!): MutationResponse!
  createAdminCollection(user_id: Int!, code_id: Int!): MutationResponse!
  getCollection(id: Int!): Code!
  deleteCollection(id: Int!): MutationResponse!
}

# media
type Media implements Node {
  id: ID!
  title: String!
  contents: String!
  img: Byte!
  created_at: Time!
  updated_at: Time!
}
extend type Query {
  getAllMedia(limit: Int!, skip: Int!): [Media]!
}
extend type Mutation {
  createMedia(title: String!, contents: String!, img: Byte!): MutationResponse!
  getMedia(id: Int!): Media!
  updateMedia(
    id: ID!
    title: String!
    contents: String!
    img: Byte!
  ): MutationResponse!
  deleteMedia(id: Int!): MutationResponse!
}

# stars
type Star implements Node {
  id: ID!
  user_id: Int!
  codes_id: Int!
}
extend type Mutation {
  createStar(code_id: Int!): MutationResponse!
  createAdminStar(user_id: Int!, code_id: Int!): MutationResponse!
  countStar(code_id: Int!): Int!
  deleteStar(user_id: Int!, code_id: Int!): MutationResponse!
}

# users
type User implements Node {
  id: ID!
  username: String!
  password: String!
  email: String!
  sex: String!
  date_of_birth: String!
  created_at: Time!
  updated_at: Time!
}
extend type Mutation {
  createUser(
    username: String!
    password: String!
    email: String!
    sex: String!
    date_of_birth: String!
  ): MutationResponse!
  loginUser(username: String!, password: String!): Boolean!
  getUser(username: String!): Int!
  updateUser(
    username: String!
    updateName: String!
    email: String!
  ): MutationResponse!
  deleteUser(username: String!): MutationResponse!
}

# token
extend type Mutation {
  createToken(username: String!): String!
  createAdminToken(username: String!): String!
}

type MutationResponse implements Node {
  id: ID!
  is_error: Boolean!
  message: String!
}

enum SortBy {
  ASC
  DESC
}

scalar Time
scalar UUID
scalar Byte
